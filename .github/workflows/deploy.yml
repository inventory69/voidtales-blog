name: Deploy Astro Blog

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    # 1. Definiere ein Environment f√ºr den Job
    environment:
      name: production
      url: https://blog.hzwd.xyz/ # Optional: F√ºge die URL deines Ziels hinzu

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîß Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: üì¶ Cache Node.js modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üß© Install Dependencies
        run: npm install

      # Dieser entscheidende Schritt, der gefehlt hat
      - name: üî® Build Astro Project
        run: npm run build

      - name: üöÄ Deploy with rsync and atomic swap
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.DIFFUSER_USERNAME }}
          key: ${{ secrets.DIFFUSER_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 1. Manuelle Host Key Verifizierung
            # SSH-Client-Ordner erstellen, falls nicht vorhanden
            mkdir -p ~/.ssh
            # Finde und speichere den Host-Key des Servers
            ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      
            # 2. Tempor√§ren Ordner erstellen
            NEW_DEPLOY_DIR="/tmp/dettmer.dev-website_$(date +%s)"
            mkdir -p $NEW_DEPLOY_DIR
      
            echo "Current directory is $(pwd)"
            echo "Files in current directory:"
            ls -la
            echo "Files in GITHUB_WORKSPACE:"
            ls -la $GITHUB_WORKSPACE

            # 3. rsync verwenden, um die Dateien zu √ºbertragen
            rsync -az -e 'ssh -p ${{ secrets.SSH_PORT }}' --progress $GITHUB_WORKSPACE/dist/ ${{ secrets.DIFFUSER_USERNAME }}@${{ secrets.HOST }}:$NEW_DEPLOY_DIR/
      
            # 4. Ordner atomar tauschen
            DEPLOY_PATH="/var/www/dettmer.dev"
            sudo mv $NEW_DEPLOY_DIR $DEPLOY_PATH
      
      # Optional: alten Ordner l√∂schen
      # sudo rm -rf $OLD_DEPLOY_PATH

      # # 1. Create a temporary folder with a unique name
            # NEW_DEPLOY_DIR="/tmp/blog.hzwd.xyz_$(date +%s)"
            # mkdir -p $NEW_DEPLOY_DIR
            
            # # 2. Use rsync to transfer the files
            # rsync -az -e 'ssh -p ${{ secrets.SSH_PORT }} -i ${{ secrets.SSH_KEY }}' --progress dist/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:$NEW_DEPLOY_DIR/
            
            # # 3. Atomically swap the folders and clean up
            # DEPLOY_PATH="/var/www/blog.hzwd.xyz"
            # mv $NEW_DEPLOY_DIR $DEPLOY_PATH
            # rm -rf $OLD_DEPLOY_PATH # Clean up old folder if it exists