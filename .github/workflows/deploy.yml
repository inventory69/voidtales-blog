name: Deploy Astro Blog

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    # 1. Definiere ein Environment fÃ¼r den Job
    environment:
      name: production
      url: https://blog.hzwd.xyz/ # Optional: FÃ¼ge die URL deines Ziels hinzu

    steps:
      - name: ðŸ“¥ Checkout Code
        uses: actions/checkout@v3

      - name: ðŸ”§ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: ðŸ“¦ Cache Node.js modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ðŸ§© Install Dependencies
        run: npm install

      # Dieser entscheidende Schritt, der gefehlt hat
      - name: ðŸ”¨ Build Astro Project
        run: npm run build

      - name: ðŸš€ Deploy with rsync and atomic swap
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 1. Create a temporary folder with a unique name
            NEW_DEPLOY_DIR="/tmp/blog.hzwd.xyz_$(date +%s)"
            mkdir -p $NEW_DEPLOY_DIR
            
            # 2. Use rsync to transfer the files
            rsync -az -e 'ssh -p ${{ secrets.SSH_PORT }} -i ${{ secrets.SSH_KEY }}' --progress dist/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:$NEW_DEPLOY_DIR/
            
            # 3. Atomically swap the folders and clean up
            DEPLOY_PATH="/var/www/blog.hzwd.xyz"
            mv $NEW_DEPLOY_DIR $DEPLOY_PATH
            rm -rf $OLD_DEPLOY_PATH # Clean up old folder if it exists
